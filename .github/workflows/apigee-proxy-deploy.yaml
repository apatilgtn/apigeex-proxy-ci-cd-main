name: Deploy Apigee Proxy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17

    - name: Download apigeecli install script
      run: |
           curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh -o downloadLatest.sh
            chmod +x downloadLatest.sh

    - name: Install apigeecli
      run: |
        curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh -
        sudo mv apigeecli /usr/local/bin/
        apigeecli version

    - name: Set up gcloud CLI
      uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.GCP_CREDENTIALS }}
        project_id: 'vital-scout-430808-k8'

    - name: Authenticate gcloud
      run: |
        gcloud auth activate-service-account --key-file=<(echo '${{ secrets.GCP_CREDENTIALS }}' | base64 --decode)

    - name: Get Access Token
      id: get_token
      run: |
        ACCESS_TOKEN=$(gcloud auth print-access-token)
        echo "::set-output name=token::$ACCESS_TOKEN"

    - name: Create API Proxy Bundle
      run: zip -r apiproxy.zip apiproxy

    - name: Deploy API Proxy
      env:
        APIGEE_ORG: ${{ secrets.APIGEE_ORG }}
        APIGEE_ENV: ${{ secrets.APIGEE_ENV }}
        PROXY_NAME: ${{ secrets.PROXY_NAME }}
      run: |
        apigeecli apis create bundle -f apiproxy.zip -n $PROXY_NAME -o $APIGEE_ORG -t ${{ steps.get_token.outputs.token }}
        LATEST_REVISION=$(apigeecli apis list revisions -n $PROXY_NAME -o $APIGEE_ORG -t ${{ steps.get_token.outputs.token }} | jq -r '.[]' | sort -n | tail -1)
        apigeecli apis deploy -n $PROXY_NAME -o $APIGEE_ORG -e $APIGEE_ENV -r $LATEST_REVISION -t ${{ steps.get_token.outputs.token }}

    - name: Verify Deployment
      env:
        APIGEE_ORG: ${{ secrets.APIGEE_ORG }}
        APIGEE_ENV: ${{ secrets.APIGEE_ENV }}
        PROXY_NAME: ${{ secrets.PROXY_NAME }}
      run: |
        DEPLOYMENT_STATUS=$(apigeecli apis getdeployment -n $PROXY_NAME -o $APIGEE_ORG -e $APIGEE_ENV -t ${{ steps.get_token.outputs.token }} | jq -r '.state')
        if [ "$DEPLOYMENT_STATUS" != "deployed" ]; then
          echo "Deployment failed. Status: $DEPLOYMENT_STATUS"
          exit 1
        fi
        echo "Deployment successful!"
