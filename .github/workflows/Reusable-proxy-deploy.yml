# Name of the reusable workflow
name: Reusable Apigee Proxy Deployment

# Trigger for the workflow
on:
  # This workflow is designed to be called by other workflows
  workflow_call:
    # Input parameters for the workflow
    inputs:
      proxy_name:
        description: The name of the API proxy to deploy
        required: true
        type: 'string'
      proxy-directory:
        description: Working directory to zip up as your proxy bundle
        required: false
        type: 'string'
        default: 'apiproxy'
      dev_env:
        description: The name of the development environment
        required: true
        type: 'string'
      test_env:
        description: The name of the testing environment
        required: true
        type: 'string'
      uat_env:
        description: The name of the UAT environment
        required: true
        type: 'string'
      runner:
        description: The runner to use for the job
        required: false
        default: 'ubuntu-latest'
        type: 'string'
    # Secrets required for the workflow
    secrets:
      apigee_org:
        required: true
      service_account:
        required: true
      workload_identity_provider:
        required: true

# Jobs defined in the workflow
jobs:
  Deploy_Apigee_Proxy:
    name: "Deploy API"
    # Use the runner specified in the input, default to ubuntu-latest
    runs-on: ${{ inputs.runner }}
    # Set permissions for the job
    permissions:
      contents: read
      id-token: write
    # Environment variables used across steps
    env:
      APIGEE_ORG: ${{ secrets.apigee_org }}
      APIGEE_PROXY_NAME: ${{ inputs.proxy_name }}
      APIGEE_DEV_ENV: ${{ inputs.dev_env }}
      APIGEE_TEST_ENV: ${{ inputs.test_env }}
      APIGEE_UAT_ENV: ${{ inputs.uat_env }}

    # Steps to execute in the job
    steps:
      # Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Authenticate to Google Cloud using Workload Identity Federation
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/1039037619425/locations/global/workloadIdentityPools/github-actions/providers/github-actions-oidc '
          service_account: 'github-actions-workflow@vital-scout-430808-k8.iam.gserviceaccount.com'

      # Set up the Google Cloud SDK
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      # Create a zip file of the API proxy bundle
      - name: Create API bundle
        run: zip -r proxy.zip ${{ inputs.proxy-directory }}

      # Authenticate to GCP and get an access token
      - name: Authenticate to GCP
        id: auth
        run: |
          ACCESS_TOKEN=$(gcloud auth application-default print-access-token)
          echo "access_token=$ACCESS_TOKEN" >> $GITHUB_OUTPUT

      # Upload the API Proxy bundle to Apigee
      - name: Upload API Proxy Bundle
        id: upload
        env:
          ACCESS_TOKEN: ${{ steps.auth.outputs.access_token }}
          APIGEE_ORG: ${{ secrets.APIGEE_ORG }}
        run: |
          response=$(curl --fail -X POST \
            -H "Content-Type: multipart/form-data" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -F "file=@proxy.zip" \
            "https://apigee.googleapis.com/v1/organizations/$APIGEE_ORG/apis?action=import&name=$APIGEE_PROXY_NAME" \
            --silent)

          echo "Apigee Response: $response"

          revision=$(echo "$response" | jq --raw-output .revision)
          echo "apigee-revision=$revision" >> $GITHUB_OUTPUT

      # Deploy the API to the Dev environment and validate the deployment
      - name: Deploy to Dev Environment and Validate Revision
        env:
          APIGEE_ORG: ${{ secrets.APIGEE_ORG }}
          APIGEE_ENV: ${{ inputs.dev_env }}
          APIGEE_PROXY_NAME: ${{ inputs.proxy_name }}
        run: |
          # Deploy the API
          curl -X POST \
          -H "Authorization: Bearer ${{ steps.auth.outputs.access_token }}" \
          "https://apigee.googleapis.com/v1/organizations/$APIGEE_ORG/environments/$APIGEE_ENV/apis/$APIGEE_PROXY_NAME/revisions/${{ steps.upload.outputs.apigee-revision }}/deployments?override=true"

          echo "Waiting for deployment to complete..."
          sleep 60

          # Retry loop to check deployment status
          max_retries=5
          retry_count=0
          while [ $retry_count -lt $max_retries ]; do
            VALIDATION_OUTPUT=$(curl -s -X GET \
              -H "Authorization: Bearer ${{ steps.auth.outputs.access_token }}" \
              "https://apigee.googleapis.com/v1/organizations/$APIGEE_ORG/environments/$APIGEE_ENV/apis/$APIGEE_PROXY_NAME/revisions/${{ steps.upload.outputs.apigee-revision }}/deployments")
            
            echo "Validation Output: $VALIDATION_OUTPUT"
            
            if echo "$VALIDATION_OUTPUT" | jq -e '.state == "READY"' > /dev/null; then
              echo "Deployment validated successfully!"
              exit 0
            elif echo "$VALIDATION_OUTPUT" | jq -e '.state == "PROGRESSING"' > /dev/null; then
              echo "Deployment still in progress. Retrying..."
              sleep 30
              retry_count=$((retry_count+1))
            else
              echo "Deployment failed or in unexpected state!"
              exit 1
            fi
          done

          echo "Deployment validation failed after $max_retries retries!"
          exit 1

      # Additional validation step for the deployment state in Dev environment
      - name: Validate Deployment State in Dev Environment
        env:
          APIGEE_ORG: ${{ secrets.APIGEE_ORG }}
          APIGEE_DEV_ENV: ${{ inputs.dev_env }}
          APIGEE_PROXY_NAME: ${{ inputs.proxy_name }}
          ACCESS_TOKEN: ${{ steps.auth.outputs.access_token }}
        run: |
          VALIDATION_OUTPUT=$(curl -s -X GET \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            "https://apigee.googleapis.com/v1/organizations/$APIGEE_ORG/environments/$APIGEE_DEV_ENV/apis/$APIGEE_PROXY_NAME/revisions/${{ steps.upload.outputs.apigee-revision }}/deployments")

          echo "Validation Output: $VALIDATION_OUTPUT"

          if echo "$VALIDATION_OUTPUT" | grep -q '"state": "READY"'; then
            echo "Deployment state validated successfully!"
          else
            echo "Deployment validation failed!"
            exit 1
          fi
