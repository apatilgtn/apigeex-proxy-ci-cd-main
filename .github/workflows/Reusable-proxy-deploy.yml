name: Reusable Apigee Proxy Deployment

on:
  workflow_call:
    inputs:
      proxy_name:
        description: The name of the API proxy to deploy
        required: true
        type: 'string'
      proxy_directory:
        description: Working directory to zip up as your proxy bundle
        required: false
        type: 'string'
        default: 'apiproxy'
      dev_env:
        description: The name of the development environment
        required: true
        type: 'string'
      test_env:
        description: The name of the testing environment
        required: true
        type: 'string'
      uat_env:
        description: The name of the UAT environment
        required: true
        type: 'string'
      runner:
        description: The runner to use for the job
        required: false
        default: 'ubuntu-latest'
        type: 'string'
      repository:
        description: 'The repository to checkout'
        required: false
        type: 'string'
        default: ${{ github.repository }}
    secrets:
      apigee_org:
        required: true
      service_account:
        required: true
      workload_identity_provider:
        required: true

jobs:
  Deploy_Apigee_Proxy:
    name: "Deploy API"
    runs-on: ${{ inputs.runner }}
    permissions:
      contents: read
      id-token: write
    env:
      APIGEE_ORG: ${{ secrets.apigee_org }}
      APIGEE_PROXY_NAME: ${{ inputs.proxy_name }}
      APIGEE_DEV_ENV: ${{ inputs.dev_env }}
      APIGEE_TEST_ENV: ${{ inputs.test_env }}
      APIGEE_UAT_ENV: ${{ inputs.uat_env }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.workload_identity_provider }}
          service_account: ${{ secrets.service_account }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Install apigeelint
        run: npm install -g apigeelint@2.16.0

      - name: Run apigeelint
        id: linting
        run: |
          echo "Starting apigeelint analysis..."
          echo "Analyzing proxy in directory: ${{ inputs.proxy_directory }}"
          LINTING_OUTPUT=$(apigeelint -s ${{ inputs.proxy_directory }} -f json.js --maxWarnings 10)
          echo "linting_output<<EOF" >> $GITHUB_OUTPUT
          echo "$LINTING_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Count errors and warnings
          ERRORS=$(echo "$LINTING_OUTPUT" | jq '[.[] | select(.severity == "Error")] | length')
          WARNINGS=$(echo "$LINTING_OUTPUT" | jq '[.[] | select(.severity == "Warning")] | length')
          
          echo "errors=$ERRORS" >> $GITHUB_OUTPUT
          echo "warnings=$WARNINGS" >> $GITHUB_OUTPUT

      - name: Create API bundle
        run: zip -r proxy.zip ${{ inputs.proxy_directory }}

      - name: Authenticate to GCP
        id: auth
        run: |
          ACCESS_TOKEN=$(gcloud auth application-default print-access-token)
          echo "access_token=$ACCESS_TOKEN" >> $GITHUB_OUTPUT

      - name: Upload API Proxy Bundle
        id: upload
        env:
          ACCESS_TOKEN: ${{ steps.auth.outputs.access_token }}
          APIGEE_ORG: ${{ secrets.APIGEE_ORG }}
        run: |
          response=$(curl --fail -X POST \
            -H "Content-Type: multipart/form-data" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -F "file=@proxy.zip" \
            "https://apigee.googleapis.com/v1/organizations/$APIGEE_ORG/apis?action=import&name=$APIGEE_PROXY_NAME" \
            --silent)

          echo "Apigee Response: $response"

          revision=$(echo "$response" | jq --raw-output .revision)
          echo "apigee_revision=$revision" >> $GITHUB_OUTPUT

      - name: Deploy to Dev Environment
        id: deploy_dev
        env:
          APIGEE_ORG: ${{ secrets.APIGEE_ORG }}
          APIGEE_ENV: ${{ inputs.dev_env }}
          APIGEE_PROXY_NAME: ${{ inputs.proxy_name }}
        run: |
          DEPLOY_OUTPUT=$(curl -X POST \
          -H "Authorization: Bearer ${{ steps.auth.outputs.access_token }}" \
          "https://apigee.googleapis.com/v1/organizations/$APIGEE_ORG/environments/$APIGEE_ENV/apis/$APIGEE_PROXY_NAME/revisions/${{ steps.upload.outputs.apigee_revision }}/deployments?override=true")
          
          echo "deploy_output<<EOF" >> $GITHUB_OUTPUT
          echo "$DEPLOY_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Validate Deployment State in Dev Environment
        id: validate_dev
        env:
          APIGEE_ORG: ${{ secrets.APIGEE_ORG }}
          APIGEE_DEV_ENV: ${{ inputs.dev_env }}
          APIGEE_PROXY_NAME: ${{ inputs.proxy_name }}
          ACCESS_TOKEN: ${{ steps.auth.outputs.access_token }}
        run: |
          VALIDATION_OUTPUT=$(curl -s -X GET \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            "https://apigee.googleapis.com/v1/organizations/$APIGEE_ORG/environments/$APIGEE_DEV_ENV/apis/$APIGEE_PROXY_NAME/revisions/${{ steps.upload.outputs.apigee_revision }}/deployments")

          echo "validation_output<<EOF" >> $GITHUB_OUTPUT
          echo "$VALIDATION_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          if echo "$VALIDATION_OUTPUT" | grep -q '"state": "READY"'; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Generate Summary
        if: always()
        run: |
          echo "## Apigee Proxy Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Step | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Linting | $([ ${{ steps.linting.outputs.errors }} -eq 0 ] && echo '✅ Pass' || echo '❌ Fail') | Errors: ${{ steps.linting.outputs.errors }}, Warnings: ${{ steps.linting.outputs.warnings }} |" >> $GITHUB_STEP_SUMMARY
          echo "| API Bundle Upload | ✅ Success | Revision: ${{ steps.upload.outputs.apigee_revision }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deployment to Dev | $(echo '${{ steps.deploy_dev.outputs.deploy_output }}' | jq -r '.state // "N/A"') | Environment: ${{ inputs.dev_env }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Validation in Dev | ${{ steps.validate_dev.outputs.status }} | $(echo '${{ steps.validate_dev.outputs.validation_output }}' | jq -r '.state // "N/A"') |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Detailed Linting Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Rule ID | Severity | Message | File | Line |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|----------|---------|------|------|" >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.linting.outputs.linting_output }}' | jq -r '.[] | "| \(.ruleId) | \(.severity) | \(.message) | \(.filePath) | \(.lineNumber) |"' >> $GITHUB_STEP_SUMMARY

      - name: Check for failures
        if: always()
        run: |
          if [ "${{ steps.validate_dev.outputs.status }}" != "success" ] || [ ${{ steps.linting.outputs.errors }} -gt 0 ]; then
            echo "Deployment process encountered errors. Check the summary for details."
            exit 1
          fi
