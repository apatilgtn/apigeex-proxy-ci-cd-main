# Workflow Name: Reusable Apigee Proxy Deployment
# This is a reusable GitHub Actions workflow for deploying Apigee proxies.

name: Reusable Apigee Proxy Deployment

# Trigger: Defines when this workflow will run.
# `workflow_call` indicates that this is a reusable workflow that can be called by other workflows.
on:
  workflow_call:
    # Inputs section defines the parameters for the workflow.
    inputs:
      proxy_name:
        description: The name of the API proxy to deploy
        required: true
        type: 'string'
      proxy-directory:
        description: Working directory to zip up as your proxy bundle
        required: false
        type: 'string'
        default: 'apiproxy'  # Default directory for the Apigee proxy source code.
      dev_env:
        description: The name of the development environment
        required: true
        type: 'string'
      test_env:
        description: The name of the testing environment
        required: true
        type: 'string'
      uat_env:
        description: The name of the UAT environment
        required: true
        type: 'string'
      runner:
        description: The runner to use for the job
        required: false
        default: 'ubuntu-latest'  # GitHub runner to use (e.g., ubuntu-latest).

    # Define required secrets for the workflow.
    secrets:
      apigee_org:
        required: true  # Apigee organization name.
      service_account:
        required: true  # GCP service account name.
      workload_identity_provider:
        required: true  # GCP workload identity provider for GitHub Actions.

# Jobs section: Defines a set of steps that execute in the GitHub Action.
jobs:
  Deploy_Apigee_Proxy:
    name: "Deploy API"  # Human-readable name for the job.
    runs-on: ${{ inputs.runner }}  # Specify the runner for this job.

    # Permissions needed for the workflow to access repository contents and identity tokens.
    permissions:
      contents: read
      id-token: write

    # Environment variables to be used across the steps in this job.
    env:
      APIGEE_ORG: ${{ secrets.apigee_org }}  # Set Apigee organization from secrets.
      APIGEE_PROXY_NAME: ${{ inputs.proxy_name }}  # Set the Apigee proxy name from inputs.
      APIGEE_DEV_ENV: ${{ inputs.dev_env }}  # Set the development environment from inputs.
      APIGEE_TEST_ENV: ${{ inputs.test_env }}  # Set the testing environment from inputs.
      APIGEE_UAT_ENV: ${{ inputs.uat_env }}  # Set the UAT environment from inputs.

    # List of steps to execute for this job.
    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Step to check out the repository code.

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2  # Use Google Cloud authentication action.
        with:
          workload_identity_provider: 'projects/1039037619425/locations/global/workloadIdentityPools/github-actions/providers/github-actions-oidc'
          service_account: 'github-actions-workflow@vital-scout-430808-k8.iam.gserviceaccount.com'

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1  # Set up the Google Cloud SDK in the runner.

      - name: Create API bundle
        # Create a zip file of the Apigee proxy directory to upload.
        run: zip -r proxy.zip ${{ inputs.proxy-directory }}

      - name: Authenticate to GCP
        id: auth  # Define a unique ID for this step for reference in other steps.
        # Run a script to obtain the access token and store it in the GitHub output.
        run: |
          ACCESS_TOKEN=$(gcloud auth application-default print-access-token)
          echo "access_token=$ACCESS_TOKEN" >> $GITHUB_OUTPUT

      - name: Upload API Proxy Bundle
        id: upload  # Define a unique ID for this step to capture outputs.
        env:
          ACCESS_TOKEN: ${{ steps.auth.outputs.access_token }}  # Use the access token obtained earlier.
          APIGEE_ORG: ${{ secrets.APIGEE_ORG }}  # Set the Apigee organization name.
        # Run a script to upload the proxy bundle to Apigee.
        run: |
          response=$(curl --fail -X POST \
            -H "Content-Type: multipart/form-data" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -F "file=@proxy.zip" \
            "https://apigee.googleapis.com/v1/organizations/$APIGEE_ORG/apis?action=import&name=$APIGEE_PROXY_NAME" \
            --silent)
          
          echo "Apigee Response: $response"

          # Extract the revision number from the response and set it as a GitHub output.
          revision=$(echo "$response" | jq --raw-output .revision)
          echo "apigee-revision=$revision" >> $GITHUB_OUTPUT

      - name: Deploy to Dev Environment and Validate Revision
        env:
          APIGEE_ORG: ${{ secrets.APIGEE_ORG }}
          APIGEE_ENV: ${{ inputs.dev_env }}
          APIGEE_PROXY_NAME: ${{ inputs.proxy_name }}
        # Deploy the proxy to the specified environment and validate the state.
        run: |
          curl -X POST \
          -H "Authorization: Bearer ${{ steps.auth.outputs.access_token }}" \
          "https://apigee.googleapis.com/v1/organizations/$APIGEE_ORG/environments/$APIGEE_ENV/apis/$APIGEE_PROXY_NAME/revisions/${{ steps.upload.outputs.apigee-revision }}/deployments?override=true"

          # Wait for deployment to complete.
          echo "Waiting for deployment to complete..."
          sleep 30

          # Retry loop to check the deployment status.
          max_retries=5
          retry_count=0
          while [ $retry_count -lt $max_retries ]; do
            VALIDATION_OUTPUT=$(curl -s -X GET \
              -H "Authorization: Bearer ${{ steps.auth.outputs.access_token }}" \
              "https://apigee.googleapis.com/v1/organizations/$APIGEE_ORG/environments/$APIGEE_ENV/apis/$APIGEE_PROXY_NAME/revisions/${{ steps.upload.outputs.apigee-revision }}/deployments")

            echo "Validation Output: $VALIDATION_OUTPUT"
            
            # Check if the deployment state is "READY".
            if echo "$VALIDATION_OUTPUT" | jq -e '.state == "READY"' > /dev/null; then
              echo "Deployment validated successfully!"
              exit 0
            elif echo "$VALIDATION_OUTPUT" | jq -e '.state == "PROGRESSING"' > /dev/null; then
              echo "Deployment still in progress. Retrying..."
              sleep 30
              retry_count=$((retry_count+1))
            else
              echo "Deployment failed or in unexpected state!"
              exit 1
            fi
          done

          echo "Deployment validation failed after $max_retries retries!"
          exit 1
