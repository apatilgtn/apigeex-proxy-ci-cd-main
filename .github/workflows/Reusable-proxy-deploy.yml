name: Reusable Apigee Proxy Deployment
# Define the name of the reusable workflow for deploying Apigee proxies.

on:
  workflow_call:
    inputs:
      # Workflow input parameters to configure the deployment process.
      proxy_name:
        description: The name of the API proxy to deploy
        required: true
        type: 'string'
      proxy-directory:
        description: Working directory to zip up as your proxy bundle
        required: false
        type: 'string'
        default: 'apiproxy'
      dev_env:
        description: The name of the development environment
        required: true
        type: 'string'
      test_env:
        description: The name of the testing environment
        required: true
        type: 'string'
      uat_env:
        description: The name of the UAT environment
        required: true
        type: 'string'
      runner:
        description: The runner to use for the job
        required: false
        default: 'ubuntu-latest'
        type: 'string'

    secrets:
      # Define required secrets for Apigee and GCP authentication.
      apigee_org:
        required: true
      service_account:
        required: true
      workload_identity_provider:
        required: true

jobs:
  Deploy_Apigee_Proxy:
    name: "Deploy API"
    runs-on: ${{ inputs.runner }}
    # Use the specified GitHub Actions runner (default: `ubuntu-latest`).

    permissions:
      contents: read
      id-token: write
    # Set permissions for accessing repository content and identity tokens.

    env:
      # Set environment variables from inputs and secrets.
      APIGEE_ORG: ${{ secrets.apigee_org }}
      APIGEE_PROXY_NAME: ${{ inputs.proxy_name }}
      APIGEE_DEV_ENV: ${{ inputs.dev_env }}
      APIGEE_TEST_ENV: ${{ inputs.test_env }}
      APIGEE_UAT_ENV: ${{ inputs.uat_env }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        # Check out the code from the repository.

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/1039037619425/locations/global/workloadIdentityPools/github-actions/providers/github-actions-oidc '
          service_account: 'github-actions-workflow@vital-scout-430808-k8.iam.gserviceaccount.com'
        # Authenticate to Google Cloud using workload identity federation.

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        # Set up the Google Cloud SDK.

      - name: Set up apigeecli
        # Install the `apigeecli` command-line tool to interact with Apigee.
        run: |
          sudo apt-get update
          sudo apt-get install unzip
          wget https://github.com/apigee/apigeecli/releases/latest/download/apigeecli_v2.4.3_Linux_x86_64.zip
          ls
          unzip apigeecli_v2.4.3_Linux_x86_64.zip
          find . -name "apigeecli"
          sudo mv ./apigeecli_v2.4.3_Linux_x86_64/apigeecli /usr/local/bin/
          sudo chmod +x /usr/local/bin/apigeecli
          apigeecli --version

      - name: Create API bundle
        # Zip up the specified proxy directory into a bundle.
        run: zip -r proxy.zip ${{ inputs.proxy-directory }}

      - name: Authenticate to GCP
        id: auth
        # Retrieve an access token using the Google Cloud CLI.
        run: |
          ACCESS_TOKEN=$(gcloud auth application-default print-access-token)
          echo "access_token=$ACCESS_TOKEN" >> $GITHUB_OUTPUT

      - name: Upload API Proxy Bundle
        id: upload
        env:
          ACCESS_TOKEN: ${{ steps.auth.outputs.access_token }}
          APIGEE_ORG: ${{ secrets.APIGEE_ORG }}
        # Use the Apigee Management API to upload the API proxy bundle.
        run: |
          response=$(curl --fail -X POST \
            -H "Content-Type: multipart/form-data" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -F "file=@proxy.zip" \
            "https://apigee.googleapis.com/v1/organizations/$APIGEE_ORG/apis?action=import&name=$APIGEE_PROXY_NAME" \
            --silent)

          echo "APIgee Response: $response"

          # Extract the revision number from the response and set it as output.
          revision=$(echo "$response" | jq --raw-output .revision)
          echo "apigee-revision=$revision" >> $GITHUB_OUTPUT

      - name: Deploy Revision
        env:
          APIGEE_ORG: ${{ secrets.APIGEE_ORG }}
        # Deploy the uploaded revision to the development environment.
        run: |
          curl -X POST \
          -H "Authorization: Bearer ${{ steps.auth.outputs.access_token }}" \
          "https://apigee.googleapis.com/v1/organizations/$APIGEE_ORG/environments/$APIGEE_DEV_ENV/apis/$APIGEE_PROXY_NAME/revisions/${{ steps.upload.outputs.apigee-revision }}/deployments?override=true"

      - name: Validate Deployment State
        env:
          APIGEE_ORG: ${{ secrets.APIGEE_ORG }}
          APIGEE_DEV_ENV: ${{ secrets.APIGEE_DEV_ENV }}
        # Validate the deployment state using `apigeecli`.
        run: |
          VALIDATION_OUTPUT=$(apigeecli apis getdeployment \
          --org "$APIGEE_ORG" \
          --environment "$APIGEE_DEV_ENV" \
          --name "${{ secrets.APIGEE_PROXY_NAME }}" \
          --rev "${{ steps.upload.outputs.apigee-revision }}" \
          --token "${{ steps.auth.outputs.access_token }}")

          echo "Validation Output: $VALIDATION_OUTPUT"
  
          # Check if the state is 'deployed' in the response.
          if echo "$VALIDATION_OUTPUT" | grep -q '"state": "deployed"'; then
            echo "Deployment state validated successfully!"
          else
            echo "Deployment validation failed!"
            exit 1
          fi

      - name: Validate API Proxy Endpoint
        env:
          APIGEE_DEV_ENV: ${{ secrets.APIGEE_DEV_ENV }}
          APIGEE_ORG: ${{ secrets.APIGEE_ORG }}
          APIGEE_PROXY_NAME: ${{ secrets.APIGEE_PROXY_NAME }}
        # Make an HTTP request to the deployed API proxy endpoint.
        run: |
          BASE_URL="https://$APIGEE_DEV_ENV-$APIGEE_ORG.apigee.net/${APIGEE_PROXY_NAME}"
  
          RESPONSE=$(curl --fail -X GET "$BASE_URL" --write-out '%{http_code}' --silent --output /dev/null)
      
          # Check if the response status is HTTP 200.
          if [ "$RESPONSE" -eq 200 ]; then
            echo "API proxy endpoint is accessible and returned HTTP 200!"
          else
            echo "API proxy endpoint validation failed with status code: $RESPONSE"
            exit 1
          fi
